import os
import os.path as osp
import shutil
from ast import AST, Import, ImportFrom, NodeTransformer
from typing import Callable, Dict, List, Optional, Union

import astor
from astpretty import pprint

from .parse import DefaultASTParser, Parser
from .utils import cd

__all__ = ["FileLevelCodeGenerator", "SegmentCodeGenerator"]

CODEGEN_PREFIX = "# Generated by CodeSlim\n"


def _is_file_exist(dir, filename):
    return osp.exists(osp.join(dir, filename))


def _get_file_name(file_path):
    file = osp.basename(file_path).split(".")[:-1]
    return ".".join(file)


# Copy lines or generating code from AST node?
# It seems that generating code form AST node is more
# convenient for rewriting, for instance,
# import modules from refactored file structures,
# inheriting from rewritten base class...
class CodeGenerator:
    def generate(self):
        raise NotImplemented

    def _generate_from_str(self, filename, contends: Optional[List[str]] = None):
        with open(filename, "w") as f:
            f.writelines(CODEGEN_PREFIX)
            if contends:
                for c in contends:
                    f.writelines(c)

    def _generate_from_ast(self, filename, ast):
        source_code = astor.to_source(ast)
        with open(filename, "w") as f:
            f.writelines(CODEGEN_PREFIX)
            f.write(source_code)

    def generate_init(self, target_path, force=False):
        if not force and _is_file_exist(target_path, "__init__.py"):
            raise RuntimeError("__init__.py exists!")
        path = osp.join(target_path, "__init__.py")
        self._generate_from_str(path)

    def rewrite_imports(self, ast, module_mapper):
        raise NotImplemented

    def copy_file(self, source_file, target_dir, force=False):
        if not force and _is_file_exist(target_dir, osp.basename(source_file)):
            raise RuntimeError(f"{source_file} exists!")
        shutil.copy(source_file, target_dir)

    def makedirs(self, path):
        os.makedirs(path, exist_ok=True)

    # Do we need to fotmat generated code?
    def format(self, file_path):
        pass


class Rewriter(NodeTransformer):
    def __init__(self, targets: Dict[str, Callable]):
        for name, func in targets.items():
            setattr(self, "visit_" + name, func)


class FileLevelCodeGenerator(CodeGenerator):
    def __init__(
        self, target_dir, parser: Parser, module_mapper: Optional[Dict[str, str]] = None
    ):
        self.target_dir = target_dir
        self.parsers = parser.get_parsers()
        self.module_mapper = module_mapper or {}
        self.rewriter = Rewriter(
            {"Import": self.rewrite_imports, "ImportFrom": self.rewrite_imports}
        )

    def generate(self):
        self.makedirs(self.target_dir)
        with cd(self.target_dir):
            for parser in self.parsers:
                file_name = osp.basename(parser.file_name)
                # TODO(Asthestarsfalll): need to process __init__ file
                if file_name == "__init__.py":
                    continue
                self.rewriter.visit(parser.ast)
                self._generate_from_ast(file_name, parser.ast)

    def rewrite_imports(self, node: Union[ImportFrom, Import]) -> AST:
        if isinstance(node, ImportFrom) and hasattr(node, "is_target"):
            module_name = node.module
            if module_name in self.module_mapper:
                module_name = self.module_mapper[module_name]
            else:
                module_name = module_name.split(".")[-1]
            node.module = module_name

        return node


class SegmentCodeGenerator(FileLevelCodeGenerator):
    pass
